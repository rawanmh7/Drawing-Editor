/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DrawingEditor;

import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javafx.scene.paint.Color;
import javax.swing.JFrame;

/**
 *
 * @author Rawan
 */
public class Shapes extends javax.swing.JFrame implements MouseListener, MouseMotionListener {

    int[] points = new int[4]; // store line points
    boolean isDragged = false;
    // positions
    int p1, p2;
    int mx, my;
    int ex, ey;
    

    public Shapes() {
        initComponents();
        setTitle("Drawing Editor");
        
        // to receive mouse events for a component
        this.addMouseListener(this);
        this.addMouseMotionListener(this);
        Move.addMouseListener(this);
        Erase.addMouseListener(this);
        Reset.addMouseListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        list1 = new java.awt.List();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        Menu = new javax.swing.JComboBox<>();
        Move = new javax.swing.JRadioButton();
        Erase = new javax.swing.JRadioButton();
        Reset = new javax.swing.JRadioButton();

        jButton1.setText("jButton1");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(900, 900));
        setSize(new java.awt.Dimension(900, 900));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Menu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose:", "Circle", "Rectangle", "Line", "Square" }));
        Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuActionPerformed(evt);
            }
        });
        getContentPane().add(Menu, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 160, 40));

        Move.setText("Move");
        getContentPane().add(Move, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, 70, 30));

        Erase.setText("Erase");
        Erase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EraseActionPerformed(evt);
            }
        });
        getContentPane().add(Erase, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 70, 30));

        Reset.setText("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });
        getContentPane().add(Reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, 70, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MenuActionPerformed

    private void EraseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EraseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EraseActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ResetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Shapes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Shapes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Shapes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Shapes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Shapes().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Erase;
    private javax.swing.JComboBox<String> Menu;
    private javax.swing.JRadioButton Move;
    private javax.swing.JRadioButton Reset;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private java.awt.List list1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mousePressed(MouseEvent me) {
        if (Menu.getSelectedItem().toString().equalsIgnoreCase("line")) {
            // initial point
            points[0] = me.getX();
            points[1] = me.getY();
        }

    }

    @Override
    public void mouseReleased(MouseEvent me) {
        if (Menu.getSelectedItem().toString().equalsIgnoreCase("line")) {
            // final point 
            points[2] = me.getX();
            points[3] = me.getY();
            repaint();
        }
        if (Menu.getSelectedItem().toString().equalsIgnoreCase("square")) {
            p1 = me.getX();
            p2 = me.getY();
            // fix the size
            
            if ((p1 > 250 && p2 > 70)) {
                repaint();
            } else if ((p1 > 250 && p2 < 70)) {
                repaint();
            }

        }
        if (Menu.getSelectedItem().toString().equalsIgnoreCase("circle")) {
            p1 = me.getX();
            p2 = me.getY();

            if ((p1 > 250 && p2 > 70)) {
                repaint();
            } else if ((p1 > 250 && p2 < 70)) {
                repaint();
            }
        }
        
        if (Menu.getSelectedItem().toString().equalsIgnoreCase("rectangle")) {
            p1 = me.getX();
            p2 = me.getY();

            if ((p1 > 250 && p2 > 70)) {
                repaint();
            } else if ((p1 > 250 && p2 < 70)) {
                repaint();
            }
//                 else  if(p2 > 70  ){
//                    repaint();
//                }
        }
       
    }

    @Override
    public void mouseEntered(MouseEvent me) {

    }

    @Override
    public void mouseClicked(MouseEvent me) {
        //checks if the options are selected
        if (Erase.isSelected()) {
            ex = me.getX();
            ey = me.getY();
            
        }
        if(Reset.isSelected()){
            repaint();
        }
    }

    @Override
    public void mouseExited(MouseEvent me) {

    }

    @Override
    public void paint(Graphics g) {
        
        g.setColor(java.awt.Color.PINK);
        // Draw part
        if (Menu.getSelectedItem().toString().equalsIgnoreCase("line")) {
            g.drawLine(points[0], points[1], points[2], points[3]);

        }
        if (Menu.getSelectedItem().toString().equalsIgnoreCase("square")) {
            g.fillRect(p1, p2, 100, 100);

        }
        if (Menu.getSelectedItem().toString().equalsIgnoreCase("circle")) {
            g.fillOval(p1, p2, 100, 100);

        }
        if (Menu.getSelectedItem().toString().equalsIgnoreCase("rectangle")) {
            g.fillRect(p1, p2, 250, 100);
        }
        //Move part
        if (Menu.getSelectedItem().toString().equalsIgnoreCase("square") && Move.isSelected() && !Erase.isSelected()) {
            if (isDragged) {
                g.setColor(java.awt.Color.WHITE);
                g.fillRect(0, 0, getWidth(), getHeight());
                g.setColor(java.awt.Color.pink);
                g.fillRect(mx, my, 100, 100);
            } else {
                g.setColor(java.awt.Color.WHITE);
                g.fillRect(0, 0, getWidth(), getHeight());
                g.setColor(java.awt.Color.pink);
                g.fillRect(mx, my, 100, 100);
            }
        }
        if (Menu.getSelectedItem().toString().equalsIgnoreCase("circle") && Move.isSelected() && !Erase.isSelected()) {
            g.fillOval(p1, p2, 100, 100);
            if (isDragged) {
                g.setColor(java.awt.Color.WHITE);
                g.fillRect(0, 0, getWidth(), getHeight());
                g.setColor(java.awt.Color.pink);
                g.fillOval(mx, my, 100, 100);
            } else {
                g.setColor(java.awt.Color.WHITE);
                g.fillRect(0, 0, getWidth(), getHeight());
                g.setColor(java.awt.Color.pink);
                g.fillOval(mx, my, 100, 100);
            }
            

        }
        if (Menu.getSelectedItem().toString().equalsIgnoreCase("rectangle") && Move.isSelected() && !Erase.isSelected()) {
            if (isDragged) {
                g.setColor(java.awt.Color.WHITE);
                g.fillRect(0, 0, getWidth(), getHeight());
                g.setColor(java.awt.Color.pink);
                g.fillRect(mx, my, 250, 100);
            } else {
                g.setColor(java.awt.Color.WHITE);
                g.fillRect(0, 0, getWidth(), getHeight());
                g.setColor(java.awt.Color.pink);
                g.fillRect(mx, my, 250, 100);
            }
        }
        // Erase 
        if (Erase.isSelected()) {
            // draws on top
            g.setColor(java.awt.Color.WHITE);
            g.fillRect(ex, ey, 250, 100);
        }       
        if(Reset.isSelected()){
            g.setColor(java.awt.Color.WHITE);
            g.fillRect(0, 0, getWidth(), getHeight());
        }

    }

    @Override
    public void mouseDragged(MouseEvent me) {
        mx = me.getX() - 50;
        my = me.getY() - 50;
        isDragged = true;
        me.consume();
    }

    @Override
    public void mouseMoved(MouseEvent me) {
        mx = me.getX() - 50;
        my = me.getY() - 50;
        isDragged = false;
        me.consume();
    }






}
